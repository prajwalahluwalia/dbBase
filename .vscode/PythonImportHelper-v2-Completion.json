[
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "playlist",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Config:\n    SECRET_KEY = 'your_secret_key'  # Replace with your own secret key\n    DEBUG = True",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DatabaseConfig",
        "kind": 6,
        "importPath": "app.db_config",
        "description": "app.db_config",
        "peekOfCode": "class DatabaseConfig:\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'  # Change this to your database URI\n    SQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "app.db_config",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(150), nullable=False, unique=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "db = SQLAlchemy(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(150), nullable=False, unique=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "display_songs",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def display_songs(page=1):\n    items_per_page= 10\n    songs = playlist.get_all_title()\n    total_pages = math.ceil(len(songs) / items_per_page)\n    start_index = (page - 1) * items_per_page\n    end_index = start_index + items_per_page\n    displayed_songs = songs[start_index:end_index]\n    return render_template('index.html', songs=displayed_songs, total_pages=total_pages)\n@app.route('/search', methods=['POST'])\ndef search_songs():",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "search_songs",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def search_songs():\n    songs = playlist.get_all_title()\n    if request.form.get('searchInput', '').isdigit():\n        search_term = str(request.form.get('searchInput', ''))\n    else:\n        search_term = request.form.get('searchInput', '').lower()\n    filtered_songs = [song for song in songs if search_term in str(song).lower()]\n    if filtered_songs:\n        return render_template('index.html', songs=filtered_songs, total_pages=1)\n    else:",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "get_song_details",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def get_song_details(song_id):\n    details = playlist.get_song_by_id(song_id)\n    return render_template('song_detail.html', details = details)\n@app.route('/song/<int:song_id>/lyrics', methods=['GET'])\ndef get_lyrics(song_id):\n    song = playlist.get_song_by_id( song_id)\n    details = playlist.get_song_lyrics(song['title'])\n    if details:\n        return render_template('song_lyrics.html', details=details)\n    else:",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "get_lyrics",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def get_lyrics(song_id):\n    song = playlist.get_song_by_id( song_id)\n    details = playlist.get_song_lyrics(song['title'])\n    if details:\n        return render_template('song_lyrics.html', details=details)\n    else:\n        return render_template('song_not_found.html', type = 'Lyrics')\n@app.route('/song/<int:song_id>/rate', methods=['POST'])\ndef rate_song(song_id):\n    rating = request.form.get('rating')",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "rate_song",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def rate_song(song_id):\n    rating = request.form.get('rating')\n    playlist.update_rating(song_id, rating)\n    return redirect(url_for('display_songs'))",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "FlaskAppTestCase",
        "kind": 6,
        "importPath": "test.test",
        "description": "test.test",
        "peekOfCode": "class FlaskAppTestCase(unittest.TestCase):\n    def setUp(self):\n        # Set up a test client\n        self.app = app.test_client()\n        self.app.config['TESTING'] = True\n    def tearDown(self):\n        # Clean up after tests (if needed)\n        pass\n    def test_home_page(self):\n        # Test the home page",
        "detail": "test.test",
        "documentation": {}
    }
]